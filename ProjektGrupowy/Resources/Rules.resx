<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AvaxStorming_Applications" xml:space="preserve">
    <value>Project planning&amp;Priority valuation&amp;Project structural analysis&amp;Operation planning</value>
  </data>
  <data name="AvaxStorming_Description" xml:space="preserve">
    <value>Avax Storming game is designated to estimate project structure and it's priorities</value>
  </data>
  <data name="AvaxStorming_Elements" xml:space="preserve">
    <value>Represents one of product's functionalities&amp;Represents project module or project stage</value>
  </data>
  <data name="AvaxStorming_Tokens" xml:space="preserve">
    <value />
  </data>
  <data name="BuyaFeature_Applications" xml:space="preserve">
    <value>Acquiring project requirements&amp;Priorities valuation&amp;Analysis of the demand for a given functionality</value>
  </data>
  <data name="BuyaFeature_Description" xml:space="preserve">
    <value>Buy A Feature game is designated to estimate range and specify priorities of project's features</value>
  </data>
  <data name="BuyaFeature_Elements" xml:space="preserve">
    <value>Represents project's functionality</value>
  </data>
  <data name="BuyaFeature_Tokens" xml:space="preserve">
    <value>Represents money that can be spent on project functionalities</value>
  </data>
  <data name="HowNowWowMatrix_Applications" xml:space="preserve">
    <value>Usystematyzowanie procesu wytwarzania&amp;Określanie poziomu trudności zadań&amp;Planowanie projektu&amp;Szacowanie priorytetów&amp;Planowanie procesu</value>
  </data>
  <data name="HowNowWowMatrix_Description" xml:space="preserve">
    <value>Pole gry podzielone jest na 3 kwadraty symbolizujące następujące grupy: - HOW - trudne zadanie - niemożliwe do implementacji i wysokim stopni oryginalności, -WOW - łatwe zadania o wysokiej oryginalności - NOW- łatwe i mało oryginalne zadania. Gracze wypisują na kartkach swoje pomysły a następnie w formie głosowania przydzielają je do jedenj z grup.</value>
  </data>
  <data name="HowNowWowMatrix_Elements" xml:space="preserve">
    <value>Reprezentuje pomysł/ideę, którą można wdrożyć/zaimplementować</value>
  </data>
  <data name="HowNowWowMatrix_Tokens" xml:space="preserve">
    <value />
  </data>
  <data name="SpeedBoat_Applications" xml:space="preserve">
    <value>Iteration/process rating&amp;Risk analysis&amp;Evaluation of project's pros and cons&amp;Searching results&amp;Sprint Retrospective</value>
  </data>
  <data name="SpeedBoat_Description" xml:space="preserve">
    <value>Speed Boat game is designated to identifying project's chances and threats. Project is presented as a boat, threats as anchors and chances as propellers</value>
  </data>
  <data name="SpeedBoat_Elements" xml:space="preserve">
    <value>Represents threat, flaw, something that slows down the project.&amp;Represents chance, advantage, something that speeds up the project.</value>
  </data>
  <data name="SpeedBoat_Tokens" xml:space="preserve">
    <value />
  </data>
  <data name="SWOTAnalysis_Applications" xml:space="preserve">
    <value>Organizing and analyzing information&amp;Strategy building&amp;Decision-making&amp;Viability study</value>
  </data>
  <data name="SWOTAnalysis_Description" xml:space="preserve">
    <value>SWOT Analysis  is an acronym for strengths, weaknesses, opportunities, and threats and is a structured planning method that evaluates those four elements of an organization, project or business venture.</value>
  </data>
  <data name="SWOTAnalysis_Elements" xml:space="preserve">
    <value>Represents project's strengths.&amp;Represents project's weaknesses.&amp;Represents project's chances.&amp;Represents project's threats.</value>
  </data>
  <data name="SWOTAnalysis_Tokens" xml:space="preserve">
    <value />
  </data>
  <data name="WholeProduct_Applications" xml:space="preserve">
    <value>Identyfikacja wyróżników produktu&amp;Określenie kierunku rozwoju produktu</value>
  </data>
  <data name="WholeProduct_Description" xml:space="preserve">
    <value>Gra Whole Produkt wspomaga proces identyfikacji tych cech produktu, które powodują, że staje się on bardziej atrakcyjny i wyróżnia się na tle konkurencji. Podejście to pozwala również określić kierunek dalszego rozwoju produktu, tak aby przyciągnąć nowych klientów.</value>
  </data>
  <data name="WholeProduct_Elements" xml:space="preserve">
    <value>Reprezentuje cechę produktu.</value>
  </data>
  <data name="WholeProduct_Tokens" xml:space="preserve">
    <value />
  </data>
</root>